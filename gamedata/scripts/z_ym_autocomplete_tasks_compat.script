
local function dbg_print(msg,...)
    if not ym_debug then return end

    ym_debug.set_modname("AT YM_EXTENDED_TASK_INFO COMPENSATION COMPATIBILITY")
    ym_debug.dbg_print(msg,...)
		--exec_console_cmd("flush")
end


-- Gets arguments for "reward_item" and "random_reward_item" funcs in task config
function ym_get_reward_item_arg(task_id)
    newline()
    dbg_print("GET_REWARD_ITEM_ARG")
    local condlist = ym_utils.get_on_comp_condlist(task_id)

    local reward_itms_tbl = nil

    local visited = {}
    local breakFlag = false
    local function deepprint(tbl)
        for k, v in pairs(tbl) do
            if breakFlag then return end

            -- dbg_print("key = " .. tostring(k))
            -- dbg_print("val = " .. tostring(v))

            if type(v) == 'table' then
                if visited[v] == true then return end
                visited[v] = true

                deepprint(v)
            else
                if (string.find(tostring(v), "reward_item") or string.find(tostring(v), "reward_random_item")) then
                    dbg_print("found reward_item or reward_random_item at key = %s", k)
                    reward_itms_tbl = tbl[3]
                    -- dbg_print("reward_item table = " .. tostring(table_dump(tbl[k+2])))

                    breakFlag = true
                    break
                end
            end

        end
    end

    deepprint(condlist)
    return reward_itms_tbl 
end


-- TODO: To handle item compensation, the compensation would have to be summed with the other potential reward calculations
if ym_eti_utils and z_autocomplete_tasks_core then
    printf("! Monkey Patching zz_ym_extended_task_info for Autocomplete Tasks")

    local ym_utils = ym_eti_utils 
    local org_get_fetch_reward = ym_utils.ym_get_fetch_reward
    local add_task_func = ym_utils.ym_add_supported_task_func

    local at_utils = autocomplete_tasks_utils
    local get_base_cost = at_utils.get_base_cost
    local get_mcm_config = autocomplete_tasks_mcm.get_config
    -- local remove_task_func = zz_ym_extended_task_info.ym_remove_supported_task_func

    ym_reward_item_compensation = function(task_id)
        if not task_id then return end

        local itm_arg = ym_eti_core.get_reward_item_arg(task_id)
        if not itm_arg then return end

        local money_tbl = {}
        local lowest_reward = math.huge
        local highest_reward = -math.huge
        if itm_arg then
            for k, v in pairs( itm_arg ) do
                dbg_print("v = " .. tostring(v))
                local cost = utils.get_base_cost(v)
                dbg_print("cost of v = " .. tostring(cost))

                if (cost > highest_reward) then
                    highest_reward = cost 
                end
                if (cost < lowest_reward) then
                    lowest_reward = cost 
                end

                money_tbl[v] = cost
            end
        end


    function ym_setup_reward_items_info(task_id)
        if (not isATEnabled) or (not isCompensate) then
            return 0, 0 
        end

        local min_comp, max_comp = ym_reward_item_compensation(task_id)
        ym_utils.ym_set_reward_caption("reward item test 1")

        local tbl_keys = {
            ["min_compensation"] = min_comp,
            ["grn_text"] = grn_text,
            ["max_compensation"] = max_comp,
            ["clr_text"] = clr_txt,
        }

        local org_min  = ym_utils.ym_get_reward_text_min()
        org_min = org_min .. " ( +%$grn_text$min_compensation$clr_text)"
        local s        = parse_keys(org_min, tbl_keys)
        ym_utils.ym_set_reward_text_min(s)

        local org_max = ym_utils.ym_get_reward_text_max()
        org_max = org_max .. " ( +%$grn_text$max_compensation$clr_text)"
        s = parse_keys(org_max, tbl_keys)
        ym_utils.ym_set_reward_text_max(s)
        -- save_var(db.actor, (task_id .. "_ym_reward_caption"), "Reward (with item compensation):")

        return 0, 0
    end

    function ym_reward_item_caption()
        return "Reward (with item compensation):"
    end

    function ym_reward_item_text_min()
        return gc("ym_ui_reward_min") .. " (+%$min_comp)"
    end

    function ym_reward_item_text_max()
        return gc("ym_ui_reward_max") .. " (+%$max_comp)"
    end

    function ym_reward_item_text(min_cost, max_cost,min_comp, max_comp)
        local s = ym_reward_item_text_min() .. "\\n" .. ym_reward_item_text_max()
        local tbl_keys = {
            ["min"] = min_cost,
            ["max"] = max_cost,
            ["min_comp"] = min_comp,
            ["max_comp"] = max_comp,
            ["grn_text"] = grn_text,
            ["new_line"] = "\\n",
            ["clr_number"] = clr_txt,
            ["clr_text"] = clr_txt,
            ["ylw_text"] = ylw_text,
        }
        return parse_keys(s, tbl_keys)
    end

        -- end

            -- local org_combined_cap_and_reward = ym_utils.combined_caption_and_reward
            -- function ym_eti_utils.combined_caption_and_reward(min, max, task_id)
            --     if not ym_utils.ym_does_task_have_reward_item(task_id) then return org_combined_cap_and_reward(min, max, task_id) end

            --     ym_utils.ym_reset_reward_caption()
            --     local org_cap = ym_utils.ym_get_reward_caption()
            --     if (string.find(org_cap, " (with item compensation)")) then
                    
            --     end
            --     local new_cap = org_cap .. " (with item compensation)"
            --     ym_utils.ym_set_reward_caption(new_cap)

            --     return org_combined_cap_and_reward(min, max)
            -- end

            --#region generic_postpone override
            local org_postpone = ym_utils.generic_postpone
            function ym_eti_utils.generic_postpone(task_id)
                local on_comp = ym_utils.get_on_comp_condlist(task_id)
                local s = ym_utils.table_dump(on_comp)
                if (string.find(s, "reward_item") or string.find(s, "reward_random_item")) then
                    local min_compensation, max_compensation = ym_reward_item_compensation(task_id)
                    if (min_compensation and max_compensation) then
                        
                        local cap = ym_utils.ym_get_reward_caption()
                        local min, max = ym_utils.calc_reward_money(task_id)
                        local news_caption = load_var(db.actor, (task_id .. "_ym_reward_caption")) or cap

                        -- format min/max text
                        local min_s = gc("ym_ui_reward_min")
                        local max_s = ""

                        if ((type(max_cost) == "number") and (max_cost > 0)) then
                            max_s = gc("ym_ui_reward_max")
                            max_s = max_s .. " (+ %max_compensation)"
                        end

                        min_s = min_s .. " (+ %min_compensation)"

                        local combined = min_s .. "\\n" .. max_s

                        local grn_text     = utils_xml.get_color("pda_green")
                        local ylw_text     = utils_xml.get_color("pda_yellow")
                        local clr_txt      = utils_xml.get_color("pda_white")

                        local reward_total = ""
                        local tbl_keys     = {
                            ["min"] = min,
                            ["max"] = max,
                            ["grn_text"] = grn_text,
                            ["new_line"] = "\\n",
                            ["clr_number"] = clr_txt,
                            ["clr_text"] = clr_txt,
                            ["ylw_text"] = ylw_text,
                        }

                        reward_total = utils_data.parse_string_keys(combined, tbl_keys)

                        -- local news_text    = ym_utils.format_reward_string(min, max)
                        local news_icon    = "ui_inGame2_Dengi_otdani"
                        if ym_utils.is_pda_taskboard_active() then
                            -- cache_task_text(task_id, news_caption, news_text)
                            return true
                        end

                        db.actor:give_talk_message2(news_caption, reward_total, news_icon, "iconed_answer_item")
                        return true
                    end

                elseif (string.find(s, "fetch_reward_and_remove")) then

                    -- local cap = ym_utils.ym_get_reward_caption()
                    ym_utils.ym_set_reward_caption("fetch test 2")
                    return org_postpone(task_id)
                else
                    return org_postpone(task_id)
                end
            end
        end
    end


    add_task_func("reward_item,", ym_reward_item_compensation)
    add_task_func("reward_random_item,", ym_reward_item_compensation)


    function on_game_start()
        RegisterScriptCallback("on_game_load", override)
    end
end
