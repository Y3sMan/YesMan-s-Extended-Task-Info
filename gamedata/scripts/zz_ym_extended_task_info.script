--#region debug helpers
local function dbg_print(msg,...)
    if not ym_debug then return end

    ym_debug.set_modname("YM_EXTENDED_TASK_INFO")
    ym_debug.dbg_print(msg,...)
		--exec_console_cmd("flush")
end

-- local function dbg_dump(o)
--     if not ym_debug then return "" end

--     return ym_debug.dbg_dump(o)
-- end
--#endregion

-- #region helper functions
local parse_keys = utils_data.parse_string_keys
local gc = game.translate_string
if z_taskboard_overrides then
    dbg_print("PDA TASKBOARD override loaded")
    local pda_taskboard_create_overrides = z_taskboard_overrides.create_overrides
    -- pda_taskboard_create_overrides()
    -- function on_game_start()
    --     RegisterScriptCallback("on_game_load", pda_taskboard_create_overrides)
    -- end
end

local function table_dump(o)
   if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. table_dump(v) .. ','
      end
      return s .. '} '
   else
      return tostring(o)
   end
end


local function is_pda_taskboard_active()
    if ui_pda_taskboard_tab and ActorMenu.get_pda_menu():IsShown() then return true end
    return false
end


function concat_caption_with_text(caption, text)
    -- Concatenate caption and text if caption isn't empty, otherwise just return text
    -- Added newlines for better formatting

    if not text then return  caption end
    return (caption ~= "" and "\\n \\n" .. caption .. "\\n" .. text) or "\\n \\n" .. text
end

function cache_task_text(task_id, news_caption, news_text)
    cached_tasks_text[task_id] = concat_caption_with_text(news_caption, news_text)
end



local function get_sec_kind(sec)
    return ini_sys:r_string_ex(sec, "kind")
end

local function is_i_arti(sec)
    if not sec then return false end
    return tostring(get_sec_kind(sec)) == "i_arty"
end

local function is_i_mutant_attach(sec)
    if not sec then return false end
    return tostring(get_sec_kind(sec)) == "i_mutant_belt"
end

local function get_eco_multi()
	return game_difficulties.get_eco_factor("rewards") or 1
end

-- dumps a task's on_complete condition list and convert it to a single string
local function get_on_comp_condlist(task_id)
    if not task_id then return end
    dbg_print("get_on_comp_condlist")
    local cfgcache = axr_task_manager.CFG_CACHE
    if cfgcache then
        local on_comp = cfgcache and task_id and cfgcache[task_id] and cfgcache[task_id].on_complete or task_manager.task_ini:r_string_to_condlist(task_id, "on_complete")
        -- local on_comp = task_manager.task_ini:r_string_to_condlist(task_id, "on_complete")

        --     local on_comp =  task_id and task_manager.task_ini:r_string_to_condlist(task_id, "on_complete")
        if not on_comp then return end
        dbg_print("on_comp = " .. tostring(table_dump(on_comp)))
        return on_comp
    end
end

local function get_random_money_arg(task_id)
    
    dbg_print("get_random_money_arg")
    local condlist = get_on_comp_condlist(task_id)


    -- local s = tostring(dbg_dump(condlist))
    -- local i,j
    local min_reward, max_reward = 0,0

    local visited = {}
    -- local rewardArgs = {}
    local breakFlag = false
    local function deepprint(tbl)
        for k, v in pairs(tbl) do
            if breakFlag then return end

            -- dbg_print("key = " .. tostring(k))
            -- dbg_print("val = " .. tostring(v))

            if type(v) == 'table' then
                if visited[v] == true then return end
                visited[v] = true

                deepprint(v)
            else
                if string.find(tostring(v), "reward_random_money") then
                    -- dbg_print("found reward_random_money at key = " .. tostring(k))
                    -- dbg_print("reward_random_money table = " .. tostring(dbg_dump(tbl[k+2])))
                    min_reward = tbl[k+2][1]
                    max_reward = tbl[k+2][2]
                    -- dbg_print("min arg = " .. tostring(min_reward))
                    -- dbg_print("max arg = " .. tostring(max_reward))
                    breakFlag = true
                    break
                end
            end

        end
    end
        deepprint(condlist)
    -- i,j = string.find(s, "%d*%:%d*") 
    -- if (i and j) then
    --     dbg_print("i = " .. tostring(i))
    --     dbg_print("j = " .. tostring(j))
    --     local ss = string.sub(s, i, j)
    --     local ss_table = str_explode(ss, ":")
    --     dbg_print("ss = " .. tostring(ss))
    --     if ss_table then
    --         min_reward = tonumber( ss_table[1] ) or 0
    --         max_reward = tonumber( ss_table[2] ) or 0
    --         dbg_print("min_reward = " .. tostring(min_reward))
    --         dbg_print("max_reward = " .. tostring(max_reward))
    --     end
    --     -- local k,l = string.find(ss, "%d*%:")
    --     -- if (k and l) then
    --     --     -- local sss = string.sub(ss, k, l)
    --     --     local m,n = string.find(ss, "%:%d*")
    -- end

    return min_reward, max_reward 
end

local function get_static_money_arg(task_id)
    
    dbg_print("get_static_money_arg")
    local condlist = get_on_comp_condlist(task_id)


    local s = tostring(table_dump(condlist))
    -- local i,j
    local min_reward, max_reward = 0,0

    local visited = {}
    local rewardArgs = {}
    local breakFlag = false
    local function deepprint(tbl)
        for k, v in pairs(tbl) do
            if breakFlag then return end

            dbg_print("key = " .. tostring(k))
            dbg_print("val = " .. tostring(v))

            if type(v) == 'table' then
                if visited[v] == true then return end
                visited[v] = true

                deepprint(v)
            else
                if string.find(tostring(v), "reward_money") then
                    dbg_print("found reward_money at key = " .. tostring(k))
                    dbg_print("reward_money table = " .. tostring(table_dump(tbl[k+2])))
                    min_reward = tbl[k+2][1]
                    dbg_print("min arg = " .. tostring(min_reward))
                    breakFlag = true
                    break
                end
            end

        end
    end

    deepprint(condlist)

    local eco_multi = get_eco_multi() or 1
    dbg_print("eco_multi = " .. tostring(eco_multi))
    if min_reward then min_reward = min_reward * eco_multi end

    return min_reward, max_reward or 0,0
end


local function get_random_money_by_dist_arg(task_id)
    
    dbg_print("get_random_money_by_dist_arg")
    local condlist = get_on_comp_condlist(task_id)


    -- local s = tostring(dbg_dump(condlist))
    -- local i,j
    local min_arg, max_arg, arg_multi = 0, 0, 0.2

    local visited = {}
    local rewardArgs = {}
    local breakFlag = false
    local function deepprint(tbl)
        for k, v in pairs(tbl) do
            if breakFlag then return end

            -- dbg_print("key = " .. tostring(k))
            -- dbg_print("val = " .. tostring(v))

            if type(v) == 'table' then
                if visited[v] == true then return end
                visited[v] = true

                deepprint(v)
            else
                if string.find(tostring(v), "reward_random_money_by_dist") then
                    dbg_print("found reward_random_money_by_dist at key = " .. tostring(k))
                    dbg_print("reward_random_money_by_dist table = " .. tostring(table_dump(tbl[k+2])))
                    min_arg = tbl[k+2][2]
                    max_arg = tbl[k+2][3]
                    arg_multi = tbl[k+2][4]

                    dbg_print("min arg = " .. tostring(min_arg))
                    dbg_print("max arg = " .. tostring(max_arg))
                    dbg_print("arg_multi = " .. tostring(arg_multi))
                    breakFlag = true
                    break
                end
            end

        end
    end

    deepprint(condlist)

	local var = load_var(db.actor, task_id)
	local lvl_task = var and var.lvl_task or level.name()
	local lvl_target = var and var.lvl_target
	local n = lvl_task and lvl_target and txr_routes.get_shortest_path_num(lvl_task, lvl_target) or 1
    dbg_print("n = " .. tostring(n))

    local multi = get_eco_multi() or 1
	dbg_print("eco_multi " .. tostring(multi))
	local min_val = ( (tonumber(min_arg) or 500) * multi ) / 50
	dbg_print("min_val " .. tostring(min_val))
	local max_val = ( (tonumber(max_arg) or (min_val + 1000)) * multi ) / 50
	dbg_print("max_val " .. tostring(max_val))
	local money = math.random( math.ceil(min_val), math.ceil(max_val) ) * 50

    local sweet = function(money)
        return  math.ceil(n * money * tonumber(arg_multi or 0.2))
    end

	local sweets = sweet(money)

    local min_reward = min_val * 50
    local max_reward = max_val * 50

    local min_sweet = sweet(min_reward)
    local max_sweet = sweet(max_reward)

    dbg_print("min_sweet = " .. tostring(min_sweet))
    dbg_print("max_sweet = " .. tostring(max_sweet))

    min_reward = min_reward + min_sweet
    max_reward = max_reward + max_sweet 
    
    dbg_print("min_reward = " .. tostring(min_reward))
    dbg_print("max_reward = " .. tostring(max_reward))

    dbg_print("money = " .. tostring(money))
    dbg_print("sweets = " .. tostring(sweets))
    dbg_print("money + sweets = " .. tostring(money + sweets))

    return  min_reward, max_reward
end

local function get_fetch_reward_and_remove_multiplier(task_id)
    local multi = 1
    local on_comp = task_id and get_on_comp_condlist(task_id)

    local visited = {}
    local rewardArgs = {}
    local breakFlag = false
    local function deepprint(tbl)
        for k, v in pairs(tbl) do
            if breakFlag then return end

            -- dbg_print("key = " .. tostring(k))
            -- dbg_print("val = " .. tostring(v))

            if type(v) == 'table' then
                if visited[v] == true then return end
                visited[v] = true

                deepprint(v)
            else
                if string.find(tostring(v), "fetch_reward_and_remove") then
                    dbg_print("found fetch_reward_and_remove at key = " .. tostring(k))
                    dbg_print("fetch_reward_and_remove table = " .. tostring(table_dump(tbl[k + 2])))

                    -- example
                    -- fetch_reward_and_remove(simulation_task_53_fetch:0.9)
                    multi = tonumber( tbl[k + 2][2] )
                    dbg_print("multi = " .. tostring(multi))
                    breakFlag = true
                    break
                end
            end
        end
    end

    deepprint(on_comp)
    
    return multi or 1
end


local function round_reward(reward, eco_multi)
    return reward and eco_multi and (math.ceil((reward * eco_multi) / 50) * 50) or 0
end


--// TODO: fix artifact fetch_reward_and_remove rewards being verrry off
--// TODO: mutant parts very off
--*note: it appears artifacts and mutant pelts of the attachment kind get an additionaly multicative factor
--* local eco = game_difficulties.get_eco_factor("type") or 0.5
--*	local factor = (eco == 3 and 0.4) or (eco == 2 and 0.5) or 0.6

-- calculate mininum and maximum possible rewards based off item base cost and other factors
local function get_fetch_reward(task_id)
    if not task_id then return end

    local section = load_var(db.actor, task_id .. "_fetch", "")
    local amount = load_var(db.actor, task_id .. "_fetch_count") or 1

    if not (task_id and section and amount) then return end

    dbg_print("get_fetch_reward task_id = " .. tostring(task_id))
    -- local cost = 0
    local multi = get_fetch_reward_and_remove_multiplier(task_id)
    dbg_print("multi = " .. tostring(multi))


    local eco_multi = get_eco_multi()
    local max_use = IsItem("multiuse", section) or 1
    local use_con = (max_use == 1) and (not IsItem("device", section)) and (not IsItem("battery", section)) and true or false
    -- local cnt = (max_use > 1) and sec and sec:get_remaining_uses() or 1
    local cost = section and ini_sys:r_float_ex(section, "cost") or 1
    -- if (not cost) then return 0, 0 end

    dbg_print("use_con = " .. tostring(use_con))
    if cost then
        cost = cost and tonumber(cost)
        if max_use then dbg_print("max_use = " .. tostring(max_use)) end
        cost = cost and max_use and cost * (1 / max_use) or 0
        dbg_print("base cost = " .. tostring(cost))
        dbg_print("amount = " .. tostring(amount))


        if (is_i_arti(section) or is_i_mutant_attach(section)) then
            local eco = game_difficulties.get_eco_factor("type") or 0.5
            dbg_print("eco = " .. tostring(eco))
            local factor = (eco == 3 and 0.4) or (eco == 2 and 0.5) or 0.6
            dbg_print("factor = " .. tostring(factor))
            cost = factor and cost and cost * factor
            dbg_print("cost after factor and eco = " .. tostring(cost))
        end

        -- if not (cost and (cost > 0)) then return 0, 0 end
        dbg_print("base cost before multi and amount = " .. tostring(cost))
        cost = amount and cost and multi and cost * amount * multi or 0
        -- cost = count and cost and cost * count
        dbg_print("total cost after count and multi = " .. tostring(cost))
        if (eco_multi and cost) then dbg_print("total cost * eco_multi= " .. tostring(cost * eco_multi)) end
        -- if single_cost then dbg_print("single_cost = " .. tostring( single_cost )) end
    end

    local delta = math.floor(cost * 0.1)
    local min_reward = (cost - delta)
    local max_reward = (cost + delta)
    dbg_print("min_reward = " .. min_reward)
    dbg_print("max_reward = " .. max_reward)
    -- printf("\n")
    dbg_print("min_reward * eco_multi = " .. min_reward * eco_multi)
    dbg_print("max_reward * eco_multi = " .. max_reward * eco_multi)

    local min_cost = round_reward(min_reward, eco_multi)
    max_cost = round_reward(max_reward, eco_multi)
    dbg_print("final min cost calc = " .. min_cost)

    return min_cost, max_cost
end


-- PLEASE BE AWARE OF THE COMMAS at the end of these strings
-- The mod string searches through a table-version of the on_complete line of the task
-- The commas narrow down results so similar function names don't trigger in redudant spots
-- or in false-positive instances
local supported_tasks_funcs = {
    [ "fetch_reward_and_remove," ] = get_fetch_reward,
    [ "reward_random_money," ] = get_random_money_arg,
    [ "reward_random_money_by_dist" ] = get_random_money_by_dist_arg,
    [ "reward_money," ] =  get_static_money_arg
}

--#region
--[==[
=============================================================================================

-- Custom compatibility like this:
local remove_supported_func = zz_ym_extended_task_info.ym_remove_supported_task_func

ym_remove_supported_task_func("fetch_reward_and_remove,")
ym_add_supported_task_func("reward_random_money,")

local supported_task_funcs = {}
supported_tasks_funcs = ym_get_supported_task_funcs


=============================================================================================

-tm_new_task.ltx
on_complete = %=new_awesome_reward_function(arg1:arg2:arg3)%

-new_task.script
local add_func = zz_ym_extended_task_info.ym_add_supported_task_func

-- the function needs to return a tuple, even if one of the options is 0
local function estimate_reward_for_new_awesome_reward_function(task_id)
    ...
    return 0,0 
end

add_func("new_awesome_reward_function", estimate_reward_for_new_awesome_reward_function)


=============================================================================================
--]==]
--#endregion

local function is_supported_task(task_id)
    -- if not task_id then return false end
    
    dbg_print("is_supported_task", true)

    local on_comp = get_on_comp_condlist(task_id)
    local s = tostring( table_dump(on_comp) )

    for key,func in pairs(supported_tasks_funcs) do
        local min,max  = nil, nil
        if string.find(s, tostring(key)) then
            dbg_print("task is in supported_tasks_funcs") 
            -- min, max = func(task_id)
            if (min) then dbg_print("min = " .. tostring(min)) end
            if (max) then dbg_print("max = " .. tostring(max)) end
            -- printf("result of func = " .. tostring(func(task_id)))
            return true
        end
    end

    return false
end

function ym_get_supported_task_funcs()
    return supported_tasks_funcs
end

function ym_add_supported_task_func(func_name, func)
    supported_tasks_funcs[func_name] = func
end

function ym_remove_supported_task_func(func_name)
    supported_tasks_funcs[func_name] = nil
end

local function calc_reward_money(task_id)

	-- local var = load_var(db.actor, task_id)
    -- if var and var.min_reward and var.max_reward then return var.min_reward, var.max_reward end


    local on_comp = get_on_comp_condlist(task_id)
    local s = tostring(table_dump(on_comp))
    local min, max = 0, 0

    for key,f in pairs(supported_tasks_funcs) do 
        if string.find(s, tostring(key)) then
            dbg_print("key = " .. tostring(key))
            min, max = f(task_id)
            if min then dbg_print("min = " .. tostring(min)) end
            if max then dbg_print("max = " .. tostring(max)) end
            
            
            -- var.min_reward = min 
            -- var.max_reward = max 
            -- save_var(db.actor, task_id, var)
            if (min and max) then
                return min, max 
            elseif (not max and min) then
                return min, 0
            elseif (not min and max ) then
                return 0, max
            end

        end
    end

    return 0, 0
end

local grn_text       = utils_xml.get_color("pda_green")
local ylw_text       = utils_xml.get_color("pda_yellow")
local clr_txt        = utils_xml.get_color("pda_white")

local reward_icon    = "ui_inGame2_Dengi_otdani"
local reward_caption =  gc("ym_ui_caption_reward")

local function format_reward_string(min_cost, max_cost)
    -- return (result .. " " .. strformat(reward_s, tostring(cost) or "")) or org_get_fetch_task_descr(task_id)
    -- local reward_total = "Reward:" .. "\\n" .. "Min: " .. min_cost .. "\\n" .. "Max: " .. max_cost
    local test_s         = "%$ylw_textMin: %$clr_number$min $new_line%$grn_textMax: %$clr_number$max"
    -- local reward_caption = gc("ym_ui_caption_reward")
    -- local reward_caption = "%$clr_textReward:" .. "\\n"
    local reward_caption = gc("ym_ui_caption_reward") .. "\\n"
    local min_s      = gc("ym_ui_reward_min")
    local max_s      = ""

    if ( (type(max_cost) == "number") and (  max_cost > 0 )) then 
        max_s = gc("ym_ui_reward_max")
    end

    local min_max_s  = min_s .. "\\n" .. max_s
    -- if is_pda_taskboard_active() then
    local reward_total   = ""
    -- reward_total = parse_keys(reward_caption .. min_max_s,
    local tbl_keys       = {
        ["min"] = min_cost,
        ["max"] = max_cost,
        ["grn_text"] = grn_text,
        ["new_line"] = "\\n",
        ["clr_number"] = clr_txt,
        ["clr_text"] = clr_txt,
        ["ylw_text"] = ylw_text,
    }
    reward_total = parse_keys( min_max_s, tbl_keys)

    -- reward_caption = parse_keys(reward_caption, tbl_keys)
    
    local final_s =  reward_total
    -- local final_s = reward_caption .. "\\n" .. reward_total
    -- text = text .. "\\n" .. parse_keys(gc("st_fetch_count_have"), {["count"] = cnt, ["clr_txt"] = clr_txt, ["clr_number"] = clr_text})


    -- reward_caption = reward_caption .. " at 100%"
    -- reward_caption = reward_caption .. ":"

    return final_s
end

local function combined_caption_and_reward(min_reward, max_reward)
    local tbl_keys       = {
        ["min"] = min_reward,
        ["max"] = max_reward,
        ["grn_text"] = grn_text,
        ["new_line"] = "\\n",
        ["clr_number"] = clr_txt,
        ["clr_text"] = clr_txt,
        ["ylw_text"] = ylw_text,
    }
    return parse_keys(reward_caption .. "\\n" .. format_reward_string(min_reward, max_reward), tbl_keys)
end

local function extend_news_text(old_text, new_text)
    return ""
end

--#region PDA TASKBOARD COMPATIBILITY ------
-- Section taken from extended task info by Coverdrave

--[[
	Worth to note that task_id isn't a unique id for each instance of a quest,
	you can think of it as a "template" of a quest.
	Therefore, values in the following table can be overriden,
	but this doesn't seem to be an issue since the previous value has already been used.

	Weird Tasks Framework, however, has an unique id for each quest
	since it concatenates the 'key' (CACHE.description_key) and the
	taskgiver's id.
--]]

-- key = task_id, value = news_text

if z_taskboard_overrides then
    dbg_print("PDA TASKBOARD override loaded", true)
    local tskbrd = z_taskboard_overrides
    -- local pda_taskboard_create_overrides = tskbrd.create_overrides
    
    -- imported from z_taskboard_overrides
    -- local original_give_talk_message2 = db.actor.give_talk_message2
    -- db.actor.give_talk_message2 = function (...)
    --     if ActorMenu.get_pda_menu():IsShown() then
    --         local _, task_title, task_details, task_icon = ...
    --         table.insert(tskbrd.tasks_info, {
    --             task_title = task_title,
    --             task_details = task_details,
    --             task_icon = task_icon
    --         })
    --     else
    --         original_give_talk_message2(...)
    --     end

    -- end

end


if ui_pda_taskboard_tab and ui_pda_taskboard_tab.clear_cached_data then
    local original_clear_cached_data = ui_pda_taskboard_tab.clear_cached_data

    -- Clear cache table on taskboard clear
    function ui_pda_taskboard_tab.clear_cached_data()
        original_clear_cached_data()
        cached_tasks_text = {}
    end
end

--#endregion
--#endregion

-- REWARDS IN DIALOG
--#region

-- TODO: Add reward message to message history
-- ? TODO: Handle dynamic tasks from imporant npcs
-- * Taskboard handles it mostly fine
--// ! PDA Taskboard messages very garbled
--//  ? my fault?
--// * Looks like just the Messages portion is messed up?

-- TODO: patches for artifact fetch task fails
-- Gives double "you have x in inventory messages"

-- TODO: fails completely if ym_debug not loaded

local function generic_postpone(task_id)
    local min,max = calc_reward_money(task_id)
    local news_caption = reward_caption
    local news_text = format_reward_string(min,max)
    local news_icon = reward_icon

    if is_pda_taskboard_active() then
		cache_task_text(task_id, news_caption, news_text)
        return true
    end


    db.actor:give_talk_message2(news_caption, news_text, news_icon, "iconed_answer_item")
    return true
end


--// TODO: Investigate multifetch_remove function for compatibility
--#region FETCH
local org_fetch_postpone = tasks_fetch.postpone_fetch_for_next_frame
local org_setup_fetch_task = xr_effects.setup_fetch_task
function xr_effects.setup_fetch_task(actor, npc, p)
    org_setup_fetch_task(actor,npc,p)

	local npc = get_speaker(true)
	local npc_id  = npc and npc:id()
    local sec = load_var(db.actor, npc_id .. "_fetch", "")
    local cnt = sec and load_var(db.actor, npc_id .. "_count") or 1

    local function postpone(task_id, section, amount)
        if not task_id then return end
        task_id = string.sub(task_id,1,-7) or "" -- because it ends with fetch

        if (is_pda_taskboard_active()) or (not is_supported_task(task_id)) then
            dbg_print("Not a supported task")
            -- cache_task_text(task_id, news_caption, news_text)
            org_fetch_postpone(task_id, section, amount)
            return true
        end

        local min, max = calc_reward_money(task_id)
        local news_caption = reward_caption or "error"
        local news_text = format_reward_string(min, max)

		db.actor:give_talk_message2(news_caption, news_text, reward_icon, "iconed_answer_item")
        return true
    end

	CreateTimeEvent(1,"setup_fetch_task", 0, postpone, p[1], sec, cnt)
end
--#endregion




--// TODO: finish the rest of the types of dynamic tasks
--// TODO: Test RESCUE
--#region RESCUE AGENT
local org_rescue_setup = tasks_agent_rescue.setup_spy_task
function tasks_agent_rescue.setup_spy_task(actor,npc, p)
	if not (p and p[1]) then
		return false
	end
	local task_id = p[1]

    org_rescue_setup(actor, npc, p)

    CreateTimeEvent(2,"setup_spy_task",0,generic_postpone,task_id)
end

--#endregion

-- TODO: Test ASSAULT 
--#region ASSAULT   
local org_assault_setup = tasks_assault.setup_assault_task
function tasks_assault.setup_assault_task(actor, npc, p)
    dbg_print("SETUP_ASSAULT_TASK init", true)
	if not (p and p[1]) then
		return false
	end

	local task_id = p[1]

    org_assault_setup(actor, npc, p)

    if not is_pda_taskboard_active then 
		RemoveTimeEvent(0,"setup_assault_task") 
    end

    CreateTimeEvent(2,"setup_assault_task",0,generic_postpone,task_id)
end
--#endregion

--// TODO: Test BOUNTY

--#region BOUNTY
local org_bounty_setup = tasks_bounty.setup_bounty_task
function tasks_bounty.setup_bounty_task(actor, npc, p)
    org_bounty_setup(actor, npc, p)

    local task_id = p[1]
    if not task_id then return end

	if not is_pda_taskboard_active() then
		-- Removes default time event, which prevents printing of default quest info
		RemoveTimeEvent(0,"setup_bounty_task") 
	end

	-- if is_pda_taskboard_active() then return end

    
	CreateTimeEvent(2,"setup_bounty_task",0,generic_postpone,task_id)
end

--#endregion

-- TODO: Do dominance tasks
--// TODO: Test DOMINANCE
--#region DOMINANCE
local org_dominance_setup = tasks_dominance.setup_dominance_task

--#endregion

-- TODO: Test RIOC
--#region RECOVER ITEM ON CORPSE tasks
--* Note: RIOC tasks have the reward hard-coded into tasks_recover_item_on_corpse:
--* min = 5000
--* max = 7500
local org_recover_item_on_corpse_setup = tasks_recover_item_on_corpse.on_descr

function tasks_recover_item_on_corpse.on_descr(a,b,c)
    dbg_print("RIOC", true)
    org_recover_item_on_corpse_setup(a,b,c)

    local task_id = c[1]
    if not task_id then return end

	local function postpone_for_next_frame(x)
        dbg_print("x = " ..tostring(x))

        local news_caption = reward_caption
		local news_icon = reward_icon
		local news_text = format_reward_string(5000, 7500)


        if  is_pda_taskboard_active then 
            cache_task_text( news_caption, news_text)
            return true
        end

        
		db.actor:give_talk_message2(news_caption, news_text, news_icon, "iconed_answer_item")
		return true
	end
	CreateTimeEvent(2,"on_descr_rioc",0,postpone_for_next_frame, utils_data.read_from_ini(task_manager.task_ini,c[1],'level_name','string'))
end
--#endregion

-- TODO: Test SEARCH
--#region SEARCH STASH
local org_stash_setup = tasks_stash.drx_sl_create_quest_stash
xr_effects.drx_sl_create_quest_stash = function( actor, npc, p )
	if not (p and p[1] and p[2]) then
		return
	end

    if not org_stash_setup then return end
    org_stash_setup(actor, npc, p)

    local task_id = p[1]

	CreateTimeEvent(2,"setup_bounty_task",0,generic_postpone, task_id)
end

--#endregion

--// TODO: Test DELIVERY
--// ! BUG: reward estimate is off by some varying factor, most likely the distance (sweets) factor
--* Reward estimate was off because of the random number generator. We had to switch to outputting a min and max instead
-- #region DELIVERY tasks
-- local function get_target_id(task_id)
-- 	local var = load_var(db.actor, task_id)
-- 	if var and var.target_id then
-- 		return var.target_id
-- 	end
-- end

local original_on_init_delivery_task = xr_effects.on_init_delivery_task
function xr_effects.on_init_delivery_task(actor,npc,p)
    dbg_print("ON_INIT_DELIVERY_TASK", true)
	original_on_init_delivery_task(actor,npc,p)
	
	-- if not is_pda_taskboard_active() then
	-- 	RemoveTimeEvent(0,"on_init_delivery_task")
	-- end
	
	local task_id = p[1]
    if not task_id then return end

	if not is_pda_taskboard_active() then
		-- Removes default time event, which prevents printing of default quest info
		RemoveTimeEvent(0,"on_init_delivery_task") 
	end

	CreateTimeEvent(2,"on_init_delivery_task",0,generic_postpone,task_id)
end

-- #endregion

-- TODO: Test MEASURE
--#region MEASURE tasks
local org_measure_setup = tasks_measure.setup_measure_task
function tasks_measure.setup_measure_task(actor, npc, p)
    org_measure_setup(actor, npc, p)

	if not (p and p[1]) then
		printe("! ERROR setup_measure_task missing task_id")
		return false
    end

    local task_id = p[1]
    local function postpone(task_id)
        if (is_pda_taskboard_active()) or (not is_supported_task(task_id)) then
            -- dbg_print("Not a supported task")
            return true
        end

        local min,max = calc_reward_money(task_id)

        local news_caption = reward_caption
        local news_text = format_reward_string(min, max)
        local news_icon = reward_icon
        db.actor:give_talk_message2(news_caption, news_text, news_icon, "iconed_answer_item")

        return true
    end

	CreateTimeEvent(2,"setup_measure_task",0,postpone,task_id)
end
--#endregion

--#region PDA TASKBOARD COMPATIBILITY

-- PDA TASKBOARD function
if ui_pda_taskboard_tab then
    local org_get_fetch_task_descr = ui_pda_taskboard_tab.get_long_task_description
    function ui_pda_taskboard_tab.get_long_task_description(task_data)
        
        dbg_print("get_long_task_description", true)
        local task_id = task_data.task_id
        if not task_id then return org_get_fetch_task_descr(task_data) end
        -- dbg_print("string.gsplit(600:800) = " .. dbg_dump( str_explode("600:800", ":") ))

        -- dbg_print("is_fetchreward_task = " .. tostring(is_fetchreward_task(task_id)))
        -- if not is_fetchreward_task(task_id) then return org_get_fetch_task_descr(task_data) end
        if not is_supported_task(task_id) then return org_get_fetch_task_descr(task_data) end

        dbg_print("task_id = " .. tostring(task_id))

        -- if task_data then return org_get_fetch_task_descr(task_data) end


        -- local cfgcache = axr_task_manager.CFG_CACHE
        -- local t = game.translate_string(cfgcache[task_id].fetch_descr)
        -- local result = cfgcache[task_id] and cfgcache[task_id].fetch_descr and t
        local result = org_get_fetch_task_descr(task_data)

        if result then dbg_print("result = " .. tostring(result)) end



        -- local actor = db.actor
        local sec_name = db.actor and ui_item.get_sec_name(load_var(db.actor, task_id .. "_fetch", ""))
        -- local sec =  load_var(db.actor, task_id )
        local sec = load_var(db.actor, task_id .. "_fetch", "")
        local count = sec and load_var(db.actor, task_id .. "_fetch_count") or 1
        dbg_print("item = " .. tostring(sec_name))
        dbg_print("count = " .. tostring(count))
        if sec then dbg_print("type(sec) = " .. tostring(type(sec))) end

        if sec then dbg_print("kind = " .. tostring(get_sec_kind(sec))) end

        -- Reward calculation
        -- local on_comp = get_on_comp_condlist(task_id)
        -- local s = tostring(dbg_dump(on_comp))
        -- for key, func in pairs(supported_tasks_funcs) do
        --     if string.find(s, tostring(key)) then
        --         dbg_print("Supported task func is = " .. tostring(key))
        --         min_cost, max_cost = supported_tasks_funcs[key](task_id)
        --     end
        -- end
        -- local min_cost, max_cost =  calc_rewards(task_id)
        -- local eco_multi = game_difficulties.get_eco_factor("rewards") or 1


        local min_cost, max_cost = calc_reward_money(task_id)
        dbg_print("min_reward = " .. tostring(min_cost))
        dbg_print("max_reward = " .. tostring(max_cost))


        -- org_get_fetch_task_descr(task_data)
        -- do return true end


        if (((not min_cost or not max_cost) or (min_cost <= 0))) then
            return org_get_fetch_task_descr(task_data)
        elseif (max_cost <= 0) then
            max_cost = "Unavailable"
        end

        if result then
            local reward_s = combined_caption_and_reward(min_cost, max_cost) or ""
            -- if is_i_part(sec) then
            -- reward_s = game.translate_string("st_ym_reward_approx_100") or ""
            -- else
            --     reward_s = game.translate_string("st_ym_reward_1unit") or ""
            -- end
            -- return (result .. " " .. strformat(reward_s, tostring(cost) or "")) or org_get_fetch_task_descr(task_id)

            -- local reward_icon    = "ui_inGame2_Dengi_otdani"
            -- -- local reward_total = "Reward:" .. "\\n" .. "Min: " .. min_cost .. "\\n" .. "Max: " .. max_cost
            -- local grn_text       = utils_xml.get_color("pda_green")
            -- local ylw_text       = utils_xml.get_color("pda_yellow")
            -- local clr_txt        = utils_xml.get_color("pda_white")
            -- local test_s         = "%$ylw_textMin: %$clr_number$min $new_line%$grn_textMax: %$clr_number$max"
            -- -- local reward_caption = gc("ym_ui_caption_reward")
            -- -- local reward_caption = "%$clr_textReward:" .. "\\n"
            -- local reward_caption = gc("ym_ui_caption_reward") .. "\\n"
            -- local min_max_s      = gc("ym_ui_reward_total")
            -- -- if is_pda_taskboard_active() then
            -- local reward_total   = parse_keys( reward_caption .. min_max_s,
            --     {
            --         ["min"] = min_cost,
            --         ["max"] = max_cost,
            --         ["grn_text"] = grn_text,
            --         ["new_line"] = "\\n",
            --         ["clr_number"] = clr_txt,
            --         ["clr_text"] = clr_txt,
            --         ["ylw_text"] = ylw_text,
            --     })

            -- return result .. "\\n" .. reward_total
            return result .. "\\n" .. reward_s


            -- return result and reward_total and result .. "\\n" .. reward_total or org_get_fetch_task_descr(task_id)
            -- return result .. "\\n" .. reward_caption .. min_max_s or result
            -- return result .. "\\n" .. string.format("Min: %s%sMax: %s", min_cost,"\\n",max_cost)
            -- return result .. "\\n" .. "Min: " .. 0 .. "\\n" .. "Max: " .. 0

            -- return result .. " REWARD"
        end
        return org_get_fetch_task_descr(task_id)
    end
end


--#endregion

--#endregion
